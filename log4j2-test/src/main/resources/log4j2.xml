<?xml version="1.0" encoding="UTF-8"?>
<!--
    status="warn" 日志框架本身的输出日志级别
    monitorInterval="5" 自动加载配置文件的间隔时间(不重启应用动态加载配置文件，实现热更新 )，不低于5秒
-->
<Configuration status="debug" monitorInterval="5">

    <!--
        集中配置属性进行管理
        使用时通过:${name}
    -->
    <properties>
        <property name="LOG_HOME">/Users/songhengliang/java/workspace-shl/log-test/log4j2-test/logs</property>
    </properties>

    <!--日志处理-->
    <Appenders>
        <!--
          控制台输出 appender
            SYSTEM_OUT：字体颜色黑色
            SYSTEM_ERR：字体颜色红色
        -->
        <Console name="Console" target="SYSTEM_ERR">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n" />
        </Console>

        <!--日志文件输出 appender-->
        <File name="file" fileName="${LOG_HOME}/myfile.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />
        </File>

        <!--使用随机读写流的日志文件输出 appender，相比<File>性能提高了很多-->
        <RandomAccessFile name="accessFile" fileName="${LOG_HOME}/myAcclog.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />
        </RandomAccessFile>

        <!--
          按照一定规则拆分的日志文件的appender
            fileName：当前日志文件名
            filePattern：
              $${date:yyyy-MM-dd}按天为文件夹名称
              myrollog-%d{yyyy-MM-dd-HH-mm}-%i.log按分钟切割日志文件，如果文件超过指定大小，则通过序号切割%i文件

         RollingRandomAccessFile 性能比 RollingFile更优
        -->
        <RollingRandomAccessFile name="rollingFile" fileName="${LOG_HOME}/myrollog.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myrollog-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <!--
              日志级别过滤器
                onMatch="ACCEPT"：高于debug级别的日志放行
                onMismatch="DENY"：低于debug级别的日志过滤
            -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!--日志消息格式-->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %msg%n" />
            <Policies>
                <!--在系统启动时，触发拆分规则，生产一个新的日志文件-->
                <OnStartupTriggeringPolicy />
                <!--按照文件大小拆分，10MB -->
                <SizeBasedTriggeringPolicy size="10 MB" />
                <!--按照时间节点拆分，规则根据filePattern定义的-->
                <TimeBasedTriggeringPolicy />
            </Policies>
            <!--在同一个目录下，文件的个数限定为 30 个，超过进行覆盖，覆盖时间最老的-->
            <DefaultRolloverStrategy max="30" />
        </RollingRandomAccessFile>


        <!-- appender使用异步appender，因为性能提升少几乎不用 -->
        <!--<Async name="Async">
            <AppenderRef ref="file"/>
        </Async>-->
    </Appenders>

    <!--logger 定义-->
    <Loggers>


        <!--自定义异步 logger 对象
            includeLocation="false" 关闭日志记录的行号信息，因为影响性能
            additivity="false" 不在继承 rootlogger 对象
        -->
        <!--<AsyncLogger name="com.shl" level="debug" includeLocation="true" additivity="false">-->
            <!--<AppenderRef ref="Console"/>-->
        <!--</AsyncLogger>-->
        <Logger name="com.shl" level="debug" includeLocation="true" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="rollingFile"/>
        </Logger>


        <!--使用 rootLogger 配置 日志级别 level="trace"-->
        <Root level="debug">
            <!--指定日志使用的处理器-->
            <AppenderRef ref="Console"/>

            <!-- 使用异步appender，因为性能提升少几乎不用 -->
            <!--<AppenderRef ref="Async" />-->
        </Root>
    </Loggers>
</Configuration>